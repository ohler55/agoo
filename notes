;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil; fill-column: 120 -*-

todo
-----------

- graphql
 - validation

 - subscription

- early_hints
 - add early to con res
  - on write, first early then wait for message to be ready

 - early_hints_test.rb


 - Agoo::early_hints(path, [
			["link", "</style.css>; rel=preload; as=style"],
			["link", "</script.js>; rel=preload; as=script"],
		])
 - Agoo::early_hints(path, "/style.css", {rel: 'preload', as: 'style'})
  - can be called multiple times on the same path

 - Agoo::rack_early_hints = true
  - also rack/handler/agoo.rb option -Oearly_hints

 - need flag in server for rack_early_hints
 - need hints map

 - static option
  - if set for a path, send a 103 with link headers
   - same headers must be in final response a well (add automatically)
 - rack proposed

def call(env)
	if env['PATH_INFO'] == "/index.html" and early_hints = env['rack.early_hints']
		early_hints.call([
			["link", "</style.css>; rel=preload; as=style"],
			["link", "</script.js>; rel=preload; as=script"],
		])
	end
	@app.call(env)
end

def call(env)
	if early_hints = env['rack.early_hints']
		early_hints.push("/style.css", preload: true, rel: 'style')
		early_hints.push("/script.js", rel: 'script')
	end
end

- if flag set, create ibject for early_hints
 - early hints should send on socket but leave open
- can also set hash as option on server
 - if set and path matches then send

- refs
  - http://www.rubydoc.info/github/rack/rack/master/file/SPEC

rdoc -t Agoo -m README.md -x "test/*" -x "example/*" -x extconf.rb
use nice -n19 perfer when on same machine

- tests
 - cd test && tests.sh
 - bin/agoo -I ext -I lib -I example -r simple /simple@Simple
  - localhost:6464/simple
 - cd example && rackup -I ../ext -I ../lib -r agoo -s agoo
  - localhost:9292
 - cd example && ruby -I ../ext -I ../lib config.rb
  - localhost:9292
 - cd example && ruby -I ../ext -I ../lib hello.rb
  - localhost:9292/hello
 - cd example/push && rackup -I ../../ext -I ../../lib -r agoo -s agoo
  - localhost:9292/websocket.html
  - localhost:9292/sse.html
 - cd example/push && ruby -I ../../ext -I ../../lib pubsub.rb
  - localhost:6464/websocket.html
  - localhost:6464/sse.html
 - cd example/push && ruby  -I ../../ext -I ../../lib push.rb
  - localhost:6464/websocket.html
  - localhost:6464/sse.html
 - cd example && ruby -I ../ext -I ../lib mem.rb
  - memory and performance with perfer
 - cd example && ruby memx.rb
  - memory and performance with perfer, multiple workers


- server log hook
 - log callback grabs gvl

- remote cluster
 - worker server
  - connect, maybe with some kind of security
  - server feeds to worker
   - as packets arrive from con
    - needs to attach a connection id to each packet
    - worker reassemples
   - or create packet on server and pick a worker to sent it to
    - maybe based on how many outstanding to that worker and most recent latency
     - multiple and pick lowest
    - packet is con id + len + request


- doesn't die
 - cd example/push && ruby  -I ../../ext -I ../../lib push.rb
  - localhost:6464/websocket.html
  - localhost:6464/sse.html
