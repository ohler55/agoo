#!/usr/bin/env ruby

while (index = ARGV.index('-I'))
  _, path = ARGV.slice!(index, 2)
  $LOAD_PATH << path
end

# Always add ./lib to the load path as that is the default location for Ruby
# files in a project.
$LOAD_PATH << File.expand_path('./lib')

require 'optparse'
require 'fileutils'
require 'logger'

require 'agoo'

# Prepare the +usage+ string.
# Basically a banner text and description passed on +OptionParser+.
usage = %{
Usage: agoo [options] [<handler_class>@<path>]... [<file>.ru | <file>.rb]

version #{Agoo::VERSION}

Agoo is a Ruby web server. It can be run as a standalone application using
this application. The handler/class arguments must have the form of
<path>@<class> where the class is a Ruby class and the path is the URL path
that will be directed to the class or an instance of the class provided. If
the class implements a call() or on_request() method it will be used directly
otherwise an instance of the class will be created. The new method must take no
arguments and have either a call() method or a on_request() method.

Files with a .rb or .ru can also be listed. If no files or path-class pairs are
listed then Agoo will look for either a config.ru or a config.rb file to load.
In that case a kernel level run method is defined to start the server.

Example:

  agoo -I example -r simple /simple@Simple

}

@verbose = 1
@port = 6464
@binds = []
@root = '.'
@log_dir = nil
@classic = true
@console = true
@colorize = true
@threads = 0
@workers = 0
@first = false
@graphql = nil

@opts = OptionParser.new(usage)
@opts.on('-h', '--help', 'Show this display.')                                       { puts @opts.help; Process.exit!(0) }
@opts.on('-s', '--silent', 'Silent.')                                                { @verbose = 0 }
@opts.on('-v', '--verbose', 'Increase verbosity.')                                   { @verbose += 1 }
@opts.on('-f', '--root_first', 'Check the root directory before the handle paths.')  { @first = true }
@opts.on('-p', '--port PORT', Integer, 'Port to listen on.')                         { |p| @port = p }
@opts.on('-b', '--bind URL', String, 'URL to receive connections on.')               { |b| @binds << b }
@opts.on('-d', '--dir DIR', String, 'Directory to serve static assets from.')        { |d| @root = d }
@opts.on('-g', '--graphql PATH', String, 'URL path for GraphQL requests.')           { |g| @graphql = g }
@opts.on('-r', '--require FILE', String, 'Ruby require.')                            { |r| require r }
@opts.on('-t', '--threads COUNT', Integer, 'Number of threads to use.')              { |t| @threads = t }
@opts.on('-w', '--workers COUNT', Integer, 'Number of workers to use.')              { |w| @workers = w }
@opts.on('--log.dir DIR', String, 'Log file directory.')                             { |d| @log_dir = d }
@opts.on('--[no-]log.classic', 'Classic log entries instead of JSON.')               { |b| @classic = b }
@opts.on('--[no-]log.console', 'Display log entries on the console.')                { |b| @console = b }
@opts.on('--[no-]log.colorize', 'Display log entries in color.')                     { |b| @colorize = b }

handler_paths = @opts.parse(ARGV)

@threads = 0 if @threads < 0
@workers = 1 if @workers < 1

Agoo::Log.configure(dir: @log_dir,
		    console: @console,
		    classic: @classic,
		    colorize: @colorize,
		    states: {
		      INFO: 1 <= @verbose,
		      DEBUG: 3 <= @verbose,
		      connect: 2 <= @verbose,
		      request: 2 <= @verbose,
		      response: 2 <= @verbose,
		      eval: 2 <= @verbose,
		      push: 2 <= @verbose,
		    })

Agoo::Server.init(@port,
		  @root,
		  bind: @binds,
		  thread_count: @threads,
		  worker_count: @workers,
		  root_first: @first,
		  graphql: @graphql)

puts "Agoo #{Agoo::VERSION} is listening on port #{@port}. Path mappings are:" if 1 <= @verbose

handler_paths.each { |hp|
  if hp.include?('@')
    path, classname = hp.split('@')
    if classname.nil? || path.nil? || classname.empty? || path.empty?
      raise "Invalid handler/path specification. Both a class and path must be present."
    end
    c = Object.const_get(classname)
    if c.respond_to?(:call) || c.respond_to?(:on_request)
      Agoo::Server.handle(nil, path, c)
    else
      Agoo::Server.handle(nil, path, c.new)
    end
    if 1 <= @verbose
      puts "  #{path} => #{classname}"
    end
  else
    # TBD handle loading .ru and .rb files

  end
}

if handler_paths.empty?
  puts "Agoo is only serving static files in '#{@root}'."
end

Agoo::Server.start()
